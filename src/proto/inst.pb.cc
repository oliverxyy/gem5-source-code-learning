// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inst.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMessage {

namespace {

const ::google::protobuf::Descriptor* InstHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inst_MemAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inst_MemAccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Inst_InstType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_inst_2eproto() {
  protobuf_AddDesc_inst_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inst.proto");
  GOOGLE_CHECK(file != NULL);
  InstHeader_descriptor_ = file->message_type(0);
  static const int InstHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, tick_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, has_mem_),
  };
  InstHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstHeader_descriptor_,
      InstHeader::default_instance_,
      InstHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstHeader));
  Inst_descriptor_ = file->message_type(1);
  static const int Inst_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, cpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, inst_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, mem_access_),
  };
  Inst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inst_descriptor_,
      Inst::default_instance_,
      Inst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inst));
  Inst_MemAccess_descriptor_ = Inst_descriptor_->nested_type(0);
  static const int Inst_MemAccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst_MemAccess, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst_MemAccess, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst_MemAccess, mem_flags_),
  };
  Inst_MemAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inst_MemAccess_descriptor_,
      Inst_MemAccess::default_instance_,
      Inst_MemAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst_MemAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst_MemAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inst_MemAccess));
  Inst_InstType_descriptor_ = Inst_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inst_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstHeader_descriptor_, &InstHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inst_descriptor_, &Inst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inst_MemAccess_descriptor_, &Inst_MemAccess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inst_2eproto() {
  delete InstHeader::default_instance_;
  delete InstHeader_reflection_;
  delete Inst::default_instance_;
  delete Inst_reflection_;
  delete Inst_MemAccess::default_instance_;
  delete Inst_MemAccess_reflection_;
}

void protobuf_AddDesc_inst_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ninst.proto\022\014ProtoMessage\"P\n\nInstHeader"
    "\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \002(\r:\0010\022\021\n\ttick"
    "_freq\030\003 \002(\004\022\017\n\007has_mem\030\004 \002(\010\"\253\006\n\004Inst\022\n\n"
    "\002pc\030\001 \002(\004\022\014\n\004inst\030\002 \002(\007\022\016\n\006nodeid\030\003 \001(\r\022"
    "\r\n\005cpuid\030\004 \001(\r\022\014\n\004tick\030\005 \001(\006\022)\n\004type\030\006 \001"
    "(\0162\033.ProtoMessage.Inst.InstType\022\022\n\ninst_"
    "flags\030\007 \001(\r\0220\n\nmem_access\030\010 \003(\0132\034.ProtoM"
    "essage.Inst.MemAccess\032:\n\tMemAccess\022\014\n\004ad"
    "dr\030\001 \002(\004\022\014\n\004size\030\002 \002(\r\022\021\n\tmem_flags\030\003 \001("
    "\r\"\256\004\n\010InstType\022\010\n\004None\020\000\022\n\n\006IntAlu\020\001\022\n\n\006"
    "IntMul\020\002\022\n\n\006IntDiv\020\003\022\014\n\010FloatAdd\020\004\022\014\n\010Fl"
    "oatCmp\020\005\022\014\n\010FloatCvt\020\006\022\r\n\tFloatMult\020\007\022\014\n"
    "\010FloatDiv\020\010\022\r\n\tFloatSqrt\020\t\022\016\n\nSIMDIntAdd"
    "\020\n\022\021\n\rSIMDIntAddAcc\020\013\022\016\n\nSIMDIntAlu\020\014\022\016\n"
    "\nSIMDIntCmp\020\r\022\016\n\nSIMDIntCvt\020\016\022\014\n\010SIMDMis"
    "c\020\017\022\017\n\013SIMDIntMult\020\020\022\022\n\016SIMDIntMultAcc\020\021"
    "\022\020\n\014SIMDIntShift\020\022\022\023\n\017SIMDIntShiftAcc\020\023\022"
    "\014\n\010SIMDSqrt\020\024\022\020\n\014SIMDFloatAdd\020\025\022\020\n\014SIMDF"
    "loatAlu\020\026\022\020\n\014SIMDFloatCmp\020\027\022\020\n\014SIMDFloat"
    "Cvt\020\030\022\020\n\014SIMDFloatDiv\020\031\022\021\n\rSIMDFloatMisc"
    "\020\032\022\021\n\rSIMDFloatMult\020\033\022\024\n\020SIMDFloatMultAd"
    "d\020\034\022\021\n\rSIMDFloatSqrt\020\035\022\013\n\007MemRead\020\036\022\014\n\010M"
    "emWrite\020\037\022\r\n\tIprAccess\020 \022\020\n\014InstPrefetch"
    "\020!", 922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inst.proto", &protobuf_RegisterTypes);
  InstHeader::default_instance_ = new InstHeader();
  Inst::default_instance_ = new Inst();
  Inst_MemAccess::default_instance_ = new Inst_MemAccess();
  InstHeader::default_instance_->InitAsDefaultInstance();
  Inst::default_instance_->InitAsDefaultInstance();
  Inst_MemAccess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inst_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inst_2eproto {
  StaticDescriptorInitializer_inst_2eproto() {
    protobuf_AddDesc_inst_2eproto();
  }
} static_descriptor_initializer_inst_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InstHeader::kObjIdFieldNumber;
const int InstHeader::kVerFieldNumber;
const int InstHeader::kTickFreqFieldNumber;
const int InstHeader::kHasMemFieldNumber;
#endif  // !_MSC_VER

InstHeader::InstHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstHeader::InitAsDefaultInstance() {
}

InstHeader::InstHeader(const InstHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstHeader::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ver_ = 0u;
  tick_freq_ = GOOGLE_ULONGLONG(0);
  has_mem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstHeader::~InstHeader() {
  SharedDtor();
}

void InstHeader::SharedDtor() {
  if (obj_id_ != &::google::protobuf::internal::kEmptyString) {
    delete obj_id_;
  }
  if (this != default_instance_) {
  }
}

void InstHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstHeader_descriptor_;
}

const InstHeader& InstHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inst_2eproto();
  return *default_instance_;
}

InstHeader* InstHeader::default_instance_ = NULL;

InstHeader* InstHeader::New() const {
  return new InstHeader;
}

void InstHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_obj_id()) {
      if (obj_id_ != &::google::protobuf::internal::kEmptyString) {
        obj_id_->clear();
      }
    }
    ver_ = 0u;
    tick_freq_ = GOOGLE_ULONGLONG(0);
    has_mem_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // required uint32 ver = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick_freq;
        break;
      }

      // required uint64 tick_freq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_freq_)));
          set_has_tick_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_mem;
        break;
      }

      // required bool has_mem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_mem_)));
          set_has_has_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->obj_id(), output);
  }

  // required uint32 ver = 2 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tick_freq(), output);
  }

  // required bool has_mem = 4;
  if (has_has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_mem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // required uint32 ver = 2 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tick_freq(), target);
  }

  // required bool has_mem = 4;
  if (has_has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_mem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obj_id());
    }

    // required uint32 ver = 2 [default = 0];
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // required uint64 tick_freq = 3;
    if (has_tick_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tick_freq());
    }

    // required bool has_mem = 4;
    if (has_has_mem()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstHeader::MergeFrom(const InstHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_tick_freq()) {
      set_tick_freq(from.tick_freq());
    }
    if (from.has_has_mem()) {
      set_has_mem(from.has_mem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstHeader::CopyFrom(const InstHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void InstHeader::Swap(InstHeader* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(ver_, other->ver_);
    std::swap(tick_freq_, other->tick_freq_);
    std::swap(has_mem_, other->has_mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstHeader_descriptor_;
  metadata.reflection = InstHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Inst_InstType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inst_InstType_descriptor_;
}
bool Inst_InstType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Inst_InstType Inst::None;
const Inst_InstType Inst::IntAlu;
const Inst_InstType Inst::IntMul;
const Inst_InstType Inst::IntDiv;
const Inst_InstType Inst::FloatAdd;
const Inst_InstType Inst::FloatCmp;
const Inst_InstType Inst::FloatCvt;
const Inst_InstType Inst::FloatMult;
const Inst_InstType Inst::FloatDiv;
const Inst_InstType Inst::FloatSqrt;
const Inst_InstType Inst::SIMDIntAdd;
const Inst_InstType Inst::SIMDIntAddAcc;
const Inst_InstType Inst::SIMDIntAlu;
const Inst_InstType Inst::SIMDIntCmp;
const Inst_InstType Inst::SIMDIntCvt;
const Inst_InstType Inst::SIMDMisc;
const Inst_InstType Inst::SIMDIntMult;
const Inst_InstType Inst::SIMDIntMultAcc;
const Inst_InstType Inst::SIMDIntShift;
const Inst_InstType Inst::SIMDIntShiftAcc;
const Inst_InstType Inst::SIMDSqrt;
const Inst_InstType Inst::SIMDFloatAdd;
const Inst_InstType Inst::SIMDFloatAlu;
const Inst_InstType Inst::SIMDFloatCmp;
const Inst_InstType Inst::SIMDFloatCvt;
const Inst_InstType Inst::SIMDFloatDiv;
const Inst_InstType Inst::SIMDFloatMisc;
const Inst_InstType Inst::SIMDFloatMult;
const Inst_InstType Inst::SIMDFloatMultAdd;
const Inst_InstType Inst::SIMDFloatSqrt;
const Inst_InstType Inst::MemRead;
const Inst_InstType Inst::MemWrite;
const Inst_InstType Inst::IprAccess;
const Inst_InstType Inst::InstPrefetch;
const Inst_InstType Inst::InstType_MIN;
const Inst_InstType Inst::InstType_MAX;
const int Inst::InstType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Inst_MemAccess::kAddrFieldNumber;
const int Inst_MemAccess::kSizeFieldNumber;
const int Inst_MemAccess::kMemFlagsFieldNumber;
#endif  // !_MSC_VER

Inst_MemAccess::Inst_MemAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Inst_MemAccess::InitAsDefaultInstance() {
}

Inst_MemAccess::Inst_MemAccess(const Inst_MemAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Inst_MemAccess::SharedCtor() {
  _cached_size_ = 0;
  addr_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  mem_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inst_MemAccess::~Inst_MemAccess() {
  SharedDtor();
}

void Inst_MemAccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inst_MemAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inst_MemAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inst_MemAccess_descriptor_;
}

const Inst_MemAccess& Inst_MemAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inst_2eproto();
  return *default_instance_;
}

Inst_MemAccess* Inst_MemAccess::default_instance_ = NULL;

Inst_MemAccess* Inst_MemAccess::New() const {
  return new Inst_MemAccess;
}

void Inst_MemAccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = GOOGLE_ULONGLONG(0);
    size_ = 0u;
    mem_flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inst_MemAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mem_flags;
        break;
      }

      // optional uint32 mem_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_flags_)));
          set_has_mem_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Inst_MemAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // optional uint32 mem_flags = 3;
  if (has_mem_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mem_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Inst_MemAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // optional uint32 mem_flags = 3;
  if (has_mem_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mem_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Inst_MemAccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }

    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 mem_flags = 3;
    if (has_mem_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inst_MemAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inst_MemAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inst_MemAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inst_MemAccess::MergeFrom(const Inst_MemAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mem_flags()) {
      set_mem_flags(from.mem_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inst_MemAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst_MemAccess::CopyFrom(const Inst_MemAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst_MemAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Inst_MemAccess::Swap(Inst_MemAccess* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(size_, other->size_);
    std::swap(mem_flags_, other->mem_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inst_MemAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inst_MemAccess_descriptor_;
  metadata.reflection = Inst_MemAccess_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Inst::kPcFieldNumber;
const int Inst::kInstFieldNumber;
const int Inst::kNodeidFieldNumber;
const int Inst::kCpuidFieldNumber;
const int Inst::kTickFieldNumber;
const int Inst::kTypeFieldNumber;
const int Inst::kInstFlagsFieldNumber;
const int Inst::kMemAccessFieldNumber;
#endif  // !_MSC_VER

Inst::Inst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Inst::InitAsDefaultInstance() {
}

Inst::Inst(const Inst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Inst::SharedCtor() {
  _cached_size_ = 0;
  pc_ = GOOGLE_ULONGLONG(0);
  inst_ = 0u;
  nodeid_ = 0u;
  cpuid_ = 0u;
  tick_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  inst_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inst::~Inst() {
  SharedDtor();
}

void Inst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inst_descriptor_;
}

const Inst& Inst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inst_2eproto();
  return *default_instance_;
}

Inst* Inst::default_instance_ = NULL;

Inst* Inst::New() const {
  return new Inst;
}

void Inst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pc_ = GOOGLE_ULONGLONG(0);
    inst_ = 0u;
    nodeid_ = 0u;
    cpuid_ = 0u;
    tick_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    inst_flags_ = 0u;
  }
  mem_access_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_inst;
        break;
      }

      // required fixed32 inst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &inst_)));
          set_has_inst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nodeid;
        break;
      }

      // optional uint32 nodeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cpuid;
        break;
      }

      // optional uint32 cpuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpuid_)));
          set_has_cpuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_tick;
        break;
      }

      // optional fixed64 tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .ProtoMessage.Inst.InstType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoMessage::Inst_InstType_IsValid(value)) {
            set_type(static_cast< ::ProtoMessage::Inst_InstType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inst_flags;
        break;
      }

      // optional uint32 inst_flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_flags_)));
          set_has_inst_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mem_access;
        break;
      }

      // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_access()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mem_access;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Inst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 pc = 1;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pc(), output);
  }

  // required fixed32 inst = 2;
  if (has_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->inst(), output);
  }

  // optional uint32 nodeid = 3;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nodeid(), output);
  }

  // optional uint32 cpuid = 4;
  if (has_cpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpuid(), output);
  }

  // optional fixed64 tick = 5;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->tick(), output);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional uint32 inst_flags = 7;
  if (has_inst_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->inst_flags(), output);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (int i = 0; i < this->mem_access_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mem_access(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Inst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 pc = 1;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pc(), target);
  }

  // required fixed32 inst = 2;
  if (has_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->inst(), target);
  }

  // optional uint32 nodeid = 3;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nodeid(), target);
  }

  // optional uint32 cpuid = 4;
  if (has_cpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpuid(), target);
  }

  // optional fixed64 tick = 5;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->tick(), target);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional uint32 inst_flags = 7;
  if (has_inst_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->inst_flags(), target);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (int i = 0; i < this->mem_access_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mem_access(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Inst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pc = 1;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

    // required fixed32 inst = 2;
    if (has_inst()) {
      total_size += 1 + 4;
    }

    // optional uint32 nodeid = 3;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodeid());
    }

    // optional uint32 cpuid = 4;
    if (has_cpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpuid());
    }

    // optional fixed64 tick = 5;
    if (has_tick()) {
      total_size += 1 + 8;
    }

    // optional .ProtoMessage.Inst.InstType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 inst_flags = 7;
    if (has_inst_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_flags());
    }

  }
  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  total_size += 1 * this->mem_access_size();
  for (int i = 0; i < this->mem_access_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_access(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inst::MergeFrom(const Inst& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_access_.MergeFrom(from.mem_access_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_inst()) {
      set_inst(from.inst());
    }
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_cpuid()) {
      set_cpuid(from.cpuid());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_inst_flags()) {
      set_inst_flags(from.inst_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst::CopyFrom(const Inst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < mem_access_size(); i++) {
    if (!this->mem_access(i).IsInitialized()) return false;
  }
  return true;
}

void Inst::Swap(Inst* other) {
  if (other != this) {
    std::swap(pc_, other->pc_);
    std::swap(inst_, other->inst_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(cpuid_, other->cpuid_);
    std::swap(tick_, other->tick_);
    std::swap(type_, other->type_);
    std::swap(inst_flags_, other->inst_flags_);
    mem_access_.Swap(&other->mem_access_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inst_descriptor_;
  metadata.reflection = Inst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

// @@protoc_insertion_point(global_scope)
